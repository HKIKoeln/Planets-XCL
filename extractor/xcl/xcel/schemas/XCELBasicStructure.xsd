<?xml version="1.0"?>
<!--
	* XCELBasicStructure.xsd
        * This module is part of the XCL software system
        *
        * Written by Sebastian Beyl, Volker Heydegger, Jan Schnasse, Manfred Thaller, Elona Weiper 2006 - 2009
        *
        * Copyright (C) 2006 - 2009 Sebastian Beyl, Volker Heydegger, Jan Schnasse, Manfred Thaller, Elona Weiper 
        *
        * This program is free software; you can redistribute it and/or modify
        * it under the terms of the GNU General Public License as published by
        * the Free Software Foundation; either version 2 of the License, or
        * (at your option) any later version.
        *
        * This program is distributed in the hope that it will be useful,
        * but WITHOUT ANY WARRANTY; without even the implied warranty of
        * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        * GNU General Public License for more details.
    	*
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns="http://www.planets-project.eu/xcl/schemas/xcl"
	xmlns:tns="http://www.planets-project.eu/xcl/schemas/xcl"
	targetNamespace="http://www.planets-project.eu/xcl/schemas/xcl" 
	elementFormDefault="qualified">
<!--
	<xs:include schemaLocation="XCLBasicDataTypesLib.xsd"/>
	<xs:include schemaLocation="XCELBuildInMethods.xsd"/>-->
	
	<!--********************************************************************************************************-->
	<!--*********************************************Basic Structure*********************************************-->
	<!--********************************************************************************************************-->
	<xs:element name="XCELDocument">
		<xs:annotation>
			<xs:documentation> 
				Basic Structure for XML-Instances based on the eXtensible
				Characterisation Extraction Language.  
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="preProcessing" minOccurs="0"/>
				<xs:element ref="formatDescription"/>
				<xs:element ref="templates" minOccurs="0"/>
				<xs:element ref="postProcessing" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="preProcessing">
		<xs:annotation>
			<xs:documentation> 
				The preProcessing section is reserved to perform configuring tasks
				that affect the XCELProcessor. 
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="item" minOccurs="0" maxOccurs="1"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="formatDescription">
		<xs:annotation>
			<xs:documentation> 
				The 'formatDescription' section is the main part of the XCEL. The 'formatDescription' has two objectives: Firstly, 
				to represent the structure of the format and secondly to relate the parts of the data that are expected to be extracted as 
				characteristics of the file to the proper names of the properties of which they are instances. 
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="item" minOccurs="0" maxOccurs="1"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="templates">
		<xs:annotation>
			<xs:documentation> 
				The idea of the templates section is to provide a possibility for defining recurring structures. 
				Such structures can be reused in other sections of the XCEL.  
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="item" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="postProcessing">
		<xs:annotation>
			<xs:documentation> 
				The 'postProcessing' section is reserved for all actions that require the parsing of the file to be  completed, 
				as the instance of a logical property can only be derived from two or more characteristics which have already been parsed.  
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="item" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--*******************************************************************************************************-->
	<!--********************************************* END Basic Structure***************************************-->
	<!--*******************************************************************************************************-->
	
	
	<xs:element name="item" type="itemType">
		<xs:annotation>
			<xs:documentation> Technical: Sequence of bytes. Logical: a structuring unit that
				splits a file into processing units and may have semantic meaning. The length of an
				item is determined by the length of the included elements. Each item contains at
				least one sub-item, which is either a symbol, and therefore final or another item
				and as such divisible into smaller units. </xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name="symbol" type="symbolType">
		<xs:annotation>
			<xs:documentation> 
				Technical: Sequence of bytes. Logical: Smallest unit for the reader
				to read. It is always characterised by a range, indicating a position and length in
				the file, and a series of attributes. Each symbol is of a certain symbolType, which
				can be derived in underlying schemas to attach format-specific properties to further
				describe its value. 
			</xs:documentation>
		</xs:annotation>
	</xs:element>

	
	<xs:element name="processing" type="processingType">
		<xs:annotation>
			<xs:documentation> 
				A processing element contains instructions which shall be
				interpreted by an XCEL parser. 
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	
	<!--********************************************************************************************************-->
	<!--*************************************************Basic Types********************************************-->
	<!--********************************************************************************************************-->
	
	
	<!--************************************************* ItemType ****************************************-->
	<xs:complexType name="itemType" abstract="true">
		<xs:annotation>
			<xs:documentation> A structuringItem groups several symbols or properties.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			
			<xs:group ref="subItem" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attributeGroup ref="commonAttributes"/>
		<xs:attribute name="order" type="orderType" use="optional" default="sequence"/>
		<xs:attribute name="objectType" use="optional" type="xs:string"/>
		<xs:attribute name="newObject" use="optional" type="xs:boolean" default="false"/>
	</xs:complexType>
	
	<!--************************************************* SubItem Group ****************************************-->
	<xs:group name="subItem">
		<xs:choice>
			<xs:element ref="item" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="symbol" minOccurs="0" maxOccurs="unbounded"/>
			<!--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!DEPRECATED since 31th May 2008 Cologne XCEL recommendation!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			<xs:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
			-->
			<xs:element ref="processing" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>

	<!--************************************************* Item implementations ****************************************-->
	<xs:complexType name="structuringItem">
		<xs:annotation>
			<xs:documentation> 
				A structuringItem groups several symbols or properties.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="itemType"/>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="definitionItem">
		<xs:annotation>
			<xs:documentation>
				
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="itemType"/>
		</xs:complexContent>
	</xs:complexType>
	
	
	<!-- ************************************************* Symbol Type ************************************************** -->
	<xs:complexType name="symbolType">
		<xs:sequence>
		
			<xs:choice minOccurs="0">
				<xs:element name="validValues">
					<xs:complexType>
						
						<xs:choice>
							<xs:element ref="tns:valueGroup" maxOccurs="unbounded"/>
							<xs:sequence>
								<xs:element name="startRange"/>
								<xs:element name="endRange"/>
							</xs:sequence>
						</xs:choice>
						
					</xs:complexType>
				</xs:element>

				<xs:element name="nonValidValues">
					<xs:complexType>
						
						<xs:choice>
							<xs:element ref="tns:valueGroup" maxOccurs="unbounded"/>

							<xs:sequence>
								<xs:element name="startRange"/>
								<xs:element name="endRange"/>
							</xs:sequence>

						</xs:choice>
						
					</xs:complexType>
				</xs:element>
				
				<xs:element name="valueInterpretation">
					<xs:complexType>
						<xs:sequence maxOccurs="unbounded">
							<xs:element ref="tns:valueLabelGroup">
								<xs:annotation>
									<xs:documentation> 
										The label that the value found at keyValue is
										associated with. The parser compares the value found for the
										current symbol with the one given as keyValue and choses the
										appropriate label for the file property. 
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element ref="tns:valueGroup">
								<xs:annotation>
									<xs:documentation> 
										Encoded file property characteristic which
										is interpretated by keyName. 
									</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			
			<!--<xs:element ref="tns:nameGroup" minOccurs="0"/>-->
		</xs:sequence>
		<xs:attributeGroup ref="commonAttributes"/>
		<xs:attributeGroup ref="symbolAttributes"/>
	</xs:complexType>
	
	<!-- ************************************************* Processing Type ************************************************** -->
	<xs:complexType name="processingType">
		<xs:annotation>
			<xs:documentation> </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="processingMethod" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					
					<xs:sequence>
						<xs:element name="param" maxOccurs="unbounded" minOccurs="0">
							<xs:complexType>
								<xs:attribute name="valueRef" type="xs:string" use="optional"/>
								<xs:attribute name="value" type="xs:string" use="optional"/>
								<xs:attribute name="listRef" type="xs:IDREF" use="optional"/>
								<xs:attribute name="nameRef" type="xs:string" use="optional"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					
					<xs:attribute name="name" type="methodType">
						<xs:annotation>
							<xs:documentation>
								Forward declaration! The methodType must to be defined in the extension schema. 
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="type" type="processingTypeType"/>
		<xs:attribute name="xcelRef" type="xs:IDREF"/>
		<xs:attribute name="xcelNameRef" type="xs:string"/>
	</xs:complexType>

	<!--********************************************************************************************************-->
	<!--*******************************************Attribute Groups*********************************************-->
	<!--********************************************************************************************************-->
	
	<!-- **************************************** Common Attributes**********************************************-->

	<xs:attributeGroup name="commonAttributes">
		
		<xs:attribute name="identifier" type="xs:ID" use="optional">
			<xs:annotation>
				<xs:documentation> 
					Unique Identifier, first item starting with "ID", the following
					with a capital "I" followed by a number.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="optional" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>
					An optional item may or may not appear in the processed file. As
					a default every item is required, i.e. optional=false.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="multiple" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation> 
					In case multiple is true, the symbol can reappear in other parts
					of the document. The default is false.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
			
		<xs:attribute name="length" type="xs:unsignedInt">
			<xs:annotation>
				<xs:documentation>
					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="name" type="nameType" use="optional">
			<xs:annotation>
				<xs:documentation>
					Forward declaration! The nameType must to be defined in the extension schema. 
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="encoding" type="interpretationType">
			<xs:annotation>
				<xs:documentation> 
					Forward declaration! The interpretationType must to be defined in the extension schema. 
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="print" type="xs:boolean">
			<xs:annotation>
				<xs:documentation> 
					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="internalSource" type="xs:IDREF">
			<xs:annotation>
				<xs:documentation> 
					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="externalSource" type="xs:anyURI">
			<xs:annotation>
				<xs:documentation> 
					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="normDataRelation" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation> 
					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
	</xs:attributeGroup>
	
	<xs:attributeGroup name="symbolAttributes">
		
		<xs:attribute name="matchingBehaviour" type="matchingType" use="optional" default="string">
			<xs:annotation>
				<xs:documentation> 
					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
		<xs:attribute name="interpretation" type="interpretationType" default="uint8">
			<xs:annotation>
				<xs:documentation> 
					Forward declaration! The interpretationType must to be defined in the extension schema. 
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		
	
		<xs:attribute name="value" />
		
	</xs:attributeGroup>
	
	<!--********************************************************************************************************-->
	<!--***********************************************More Types*********************************************-->
	<!--********************************************************************************************************-->
	<xs:simpleType name="matchingType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="string">
				
			</xs:enumeration>
			<xs:enumeration value="regexp">
				
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="orderType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="all">
				<xs:annotation>
					<xs:documentation> 
						An Item with order type 'all' tries to match all containing
						expressions to the next position in the byteStream. The processing of the
						Item is finished when no child expression matches. The Item matches to the
						current byteStream if at least one child expression has matched.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="sequence">
				<xs:annotation>
					<xs:documentation> 
						An Item with order type 'sequence' tries to match all child
						expressions in the given order to the byteStream. The processing of the Item
						is finished if the last child expression was successfully associated to the
						byteStream or if the association of one child fails. The Item matches to the
						byteStream if all child expressions were successfully associated to the
						byteStream. The order sequence is the default. 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="choice">
				<xs:annotation>
					<xs:documentation> 
						An Item with type 'choice' tries to match one of its child
						expressions to the given byteStream. The processing of the Item is finished
						if one or no child expression matches to the byteSream. The Item matches to
						the byteStream if exactly one child expression matches. 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="processingTypeType">
		<xs:restriction base="xs:string">
			
			<xs:enumeration value="pushXCEL">
				<xs:annotation>
					<xs:documentation>
						Pushes the value that results from an interpreted  XCEL structure into another part of the XCEL syntax description.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			
			<xs:enumeration value="pullXCEL">
				<xs:annotation>
					<xs:documentation>
						Pulls an XCEL structure, referenced by its ID, into the parsing tree. 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="pushBinary">
				<xs:annotation>
					<xs:documentation>						
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			
			<xs:enumeration value="configureParser">
				<xs:annotation>
					<xs:documentation>
						Calls methods that manipulate the standard behaviour of the XCEL Processor. 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			
		</xs:restriction>
	</xs:simpleType>
	

	
	<xs:simpleType name="valueTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="value">
				<xs:annotation>
					<xs:documentation>
						The value is given directly.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="valueRef">
				<xs:annotation>
					<xs:documentation>
						The value references another element's value by ID.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="nameRef">
				<xs:annotation>
					<xs:documentation>
						The value references another element's value by name (usually for postprocessing).
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="mathEx">
				<xs:annotation>
					<xs:documentation>
						The value is a mathmatical expression, which can contain values as well as references of values.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	
	
	
	
	
	<!--********************************************************************************************************-->
	<!--*********************************elements for substitution Groups****************************************-->
	<!--********************************************************************************************************-->
	
	<xs:element name="nameGroup" abstract="true"/>
	<xs:element name="valueGroup" abstract="true"/>
	<xs:element name="valueLabelGroup" abstract="true"/>
	
</xs:schema>


